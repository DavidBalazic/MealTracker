/* tslint:disable */
/* eslint-disable */
/**
 * User Service API
 * An API for managing users, authentication, and sessions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginDTO,
  ProblemDetails,
  RegisterDTO,
  UpdateDTO,
} from '../models/index';
import {
    LoginDTOFromJSON,
    LoginDTOToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegisterDTOFromJSON,
    RegisterDTOToJSON,
    UpdateDTOFromJSON,
    UpdateDTOToJSON,
} from '../models/index';

export interface ApiUsersAdminDeleteUserIdDeleteRequest {
    id: string;
}

export interface ApiUsersAdminUpdateRoleIdPutRequest {
    id: string;
    body?: string;
}

export interface ApiUsersGetRequest {
    role?: string;
}

export interface ApiUsersLoginPostRequest {
    loginDTO?: LoginDTO;
}

export interface ApiUsersRegisterPostRequest {
    registerDTO?: RegisterDTO;
}

export interface ApiUsersUpdatePutRequest {
    updateDTO?: UpdateDTO;
}

export interface ApiUsersValidateTokenPostRequest {
    body?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Sample request:        DELETE /api/Users/admin/delete-user/{id}
     * Deletes a user by their ID. Accessible only by admins.
     */
    async apiUsersAdminDeleteUserIdDeleteRaw(requestParameters: ApiUsersAdminDeleteUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersAdminDeleteUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/admin/delete-user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        DELETE /api/Users/admin/delete-user/{id}
     * Deletes a user by their ID. Accessible only by admins.
     */
    async apiUsersAdminDeleteUserIdDelete(requestParameters: ApiUsersAdminDeleteUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersAdminDeleteUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:        PUT /api/Users/admin/update-role/{id}    Request body:        \"admin\"
     * Updates the role of a user by their ID. Accessible only by admins.
     */
    async apiUsersAdminUpdateRoleIdPutRaw(requestParameters: ApiUsersAdminUpdateRoleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersAdminUpdateRoleIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/admin/update-role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        PUT /api/Users/admin/update-role/{id}    Request body:        \"admin\"
     * Updates the role of a user by their ID. Accessible only by admins.
     */
    async apiUsersAdminUpdateRoleIdPut(requestParameters: ApiUsersAdminUpdateRoleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersAdminUpdateRoleIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows the authenticated user to delete their account permanently.    Sample request:        DELETE /api/Users/delete-account
     * Deletes the currently authenticated user\'s account.
     */
    async apiUsersDeleteAccountDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/delete-account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows the authenticated user to delete their account permanently.    Sample request:        DELETE /api/Users/delete-account
     * Deletes the currently authenticated user\'s account.
     */
    async apiUsersDeleteAccountDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersDeleteAccountDeleteRaw(initOverrides);
    }

    /**
     * Sample request:        GET /api/Users?role=admin
     * Retrieves all users or filters users by role. Accessible only by admins.
     */
    async apiUsersGetRaw(requestParameters: ApiUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        GET /api/Users?role=admin
     * Retrieves all users or filters users by role. Accessible only by admins.
     */
    async apiUsersGet(requestParameters: ApiUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersGetRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:        POST /api/Users/login      {          \"email\": \"user@example.com\",          \"password\": \"StrongPassword123\"      }
     * Authenticates a user and returns a JWT token.
     */
    async apiUsersLoginPostRaw(requestParameters: ApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDTOToJSON(requestParameters['loginDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        POST /api/Users/login      {          \"email\": \"user@example.com\",          \"password\": \"StrongPassword123\"      }
     * Authenticates a user and returns a JWT token.
     */
    async apiUsersLoginPost(requestParameters: ApiUsersLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:        POST /api/Users/register      {          \"email\": \"user@example.com\",          \"password\": \"StrongPassword123\"      }
     * Registers a new user.
     */
    async apiUsersRegisterPostRaw(requestParameters: ApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDTOToJSON(requestParameters['registerDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        POST /api/Users/register      {          \"email\": \"user@example.com\",          \"password\": \"StrongPassword123\"      }
     * Registers a new user.
     */
    async apiUsersRegisterPost(requestParameters: ApiUsersRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    PUT /api/Users/update      {          \"userId\": \"63f1e4d5e70b2f00123abcde\",          \"newEmail\": \"newemail@example.com\",          \"newPassword\": \"NewPassword123!\"      }                If no `newEmail` or `newPassword` is provided, the respective fields will remain unchanged.
     * Updates the authenticated user\'s password or email.
     */
    async apiUsersUpdatePutRaw(requestParameters: ApiUsersUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDTOToJSON(requestParameters['updateDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    PUT /api/Users/update      {          \"userId\": \"63f1e4d5e70b2f00123abcde\",          \"newEmail\": \"newemail@example.com\",          \"newPassword\": \"NewPassword123!\"      }                If no `newEmail` or `newPassword` is provided, the respective fields will remain unchanged.
     * Updates the authenticated user\'s password or email.
     */
    async apiUsersUpdatePut(requestParameters: ApiUsersUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersUpdatePutRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint fetches information about the currently authenticated user based on their JWT token.    Sample response:        {          \"Message\": \"User Info\",          \"UserId\": \"63f1e4d5e70b2f00123abcde\",          \"Email\": \"user@example.com\",          \"Role\": \"admin\"      }
     * Retrieves the authenticated user\'s information.
     */
    async apiUsersUserInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/user-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint fetches information about the currently authenticated user based on their JWT token.    Sample response:        {          \"Message\": \"User Info\",          \"UserId\": \"63f1e4d5e70b2f00123abcde\",          \"Email\": \"user@example.com\",          \"Role\": \"admin\"      }
     * Retrieves the authenticated user\'s information.
     */
    async apiUsersUserInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersUserInfoGetRaw(initOverrides);
    }

    /**
     * Sample request:        POST /api/Users/validate-token      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"
     * Validates the provided JWT token.
     */
    async apiUsersValidateTokenPostRaw(requestParameters: ApiUsersValidateTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/validate-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:        POST /api/Users/validate-token      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"
     * Validates the provided JWT token.
     */
    async apiUsersValidateTokenPost(requestParameters: ApiUsersValidateTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersValidateTokenPostRaw(requestParameters, initOverrides);
    }

}
