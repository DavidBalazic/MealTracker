/* tslint:disable */
/* eslint-disable */
/**
 * User Service API
 * An API for managing users, authentication, and sessions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginDTO,
  RegisterDTO,
  UpdateDTO,
} from '../models/index';
import {
    LoginDTOFromJSON,
    LoginDTOToJSON,
    RegisterDTOFromJSON,
    RegisterDTOToJSON,
    UpdateDTOFromJSON,
    UpdateDTOToJSON,
} from '../models/index';

export interface ApiUsersLoginPostRequest {
    loginDTO?: LoginDTO;
}

export interface ApiUsersRegisterPostRequest {
    registerDTO?: RegisterDTO;
}

export interface ApiUsersUpdatePutRequest {
    updateDTO?: UpdateDTO;
}

export interface ApiUsersValidateTokenPostRequest {
    body?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async apiUsersAdminOnlyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/admin-only`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersAdminOnlyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersAdminOnlyGetRaw(initOverrides);
    }

    /**
     */
    async apiUsersLoginPostRaw(requestParameters: ApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDTOToJSON(requestParameters['loginDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersLoginPost(requestParameters: ApiUsersLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersRegisterPostRaw(requestParameters: ApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDTOToJSON(requestParameters['registerDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersRegisterPost(requestParameters: ApiUsersRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersUpdatePutRaw(requestParameters: ApiUsersUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDTOToJSON(requestParameters['updateDTO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersUpdatePut(requestParameters: ApiUsersUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersUpdatePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUsersUserInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/user-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersUserInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersUserInfoGetRaw(initOverrides);
    }

    /**
     */
    async apiUsersValidateTokenPostRaw(requestParameters: ApiUsersValidateTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/validate-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUsersValidateTokenPost(requestParameters: ApiUsersValidateTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUsersValidateTokenPostRaw(requestParameters, initOverrides);
    }

}
