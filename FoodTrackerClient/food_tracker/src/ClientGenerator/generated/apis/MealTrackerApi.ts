/* tslint:disable */
/* eslint-disable */
/**
 * Meal Tracker API
 * API documentation for the Meal Tracker Service
 *
 * The version of the OpenAPI document: v1
 * Contact: your.email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FoodItem,
  Meal,
  MealPlan,
  UserHealth,
} from '../models/index';
import {
    FoodItemFromJSON,
    FoodItemToJSON,
    MealFromJSON,
    MealToJSON,
    MealPlanFromJSON,
    MealPlanToJSON,
    UserHealthFromJSON,
    UserHealthToJSON,
} from '../models/index';

export interface ApiMealTrackerFoodIdGetRequest {
    id: string;
}

export interface ApiMealTrackerMealIdDeleteRequest {
    id: string;
}

export interface ApiMealTrackerMealPostRequest {
    meal?: Meal;
}

export interface ApiMealTrackerMealplanIdDeleteRequest {
    id: string;
}

export interface ApiMealTrackerMealplanIdPutRequest {
    id: string;
    mealPlan?: MealPlan;
}

export interface ApiMealTrackerMealplanPostRequest {
    mealPlan?: MealPlan;
}

export interface ApiMealTrackerMealsIdGetRequest {
    id: string;
}

export interface ApiMealTrackerUserhealthUserIdGetRequest {
    userId: string;
}

/**
 * 
 */
export class MealTrackerApi extends runtime.BaseAPI {

    /**
     */
    async apiMealTrackerFoodIdGetRaw(requestParameters: ApiMealTrackerFoodIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMealTrackerFoodIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/food/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodItemFromJSON(jsonValue));
    }

    /**
     */
    async apiMealTrackerFoodIdGet(requestParameters: ApiMealTrackerFoodIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodItem> {
        const response = await this.apiMealTrackerFoodIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealTrackerMealIdDeleteRaw(requestParameters: ApiMealTrackerMealIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMealTrackerMealIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/meal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealTrackerMealIdDelete(requestParameters: ApiMealTrackerMealIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMealTrackerMealIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealTrackerMealPostRaw(requestParameters: ApiMealTrackerMealPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/MealTracker/meal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MealToJSON(requestParameters['meal']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealTrackerMealPost(requestParameters: ApiMealTrackerMealPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMealTrackerMealPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealTrackerMealplanIdDeleteRaw(requestParameters: ApiMealTrackerMealplanIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMealTrackerMealplanIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/mealplan/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealTrackerMealplanIdDelete(requestParameters: ApiMealTrackerMealplanIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMealTrackerMealplanIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealTrackerMealplanIdPutRaw(requestParameters: ApiMealTrackerMealplanIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMealTrackerMealplanIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/MealTracker/mealplan/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MealPlanToJSON(requestParameters['mealPlan']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealTrackerMealplanIdPut(requestParameters: ApiMealTrackerMealplanIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMealTrackerMealplanIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealTrackerMealplanPostRaw(requestParameters: ApiMealTrackerMealplanPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/MealTracker/mealplan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MealPlanToJSON(requestParameters['mealPlan']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMealTrackerMealplanPost(requestParameters: ApiMealTrackerMealplanPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMealTrackerMealplanPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMealTrackerMealplansGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MealPlan>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/mealplans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MealPlanFromJSON));
    }

    /**
     */
    async apiMealTrackerMealplansGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MealPlan>> {
        const response = await this.apiMealTrackerMealplansGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealTrackerMealsIdGetRaw(requestParameters: ApiMealTrackerMealsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMealTrackerMealsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/meals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MealFromJSON(jsonValue));
    }

    /**
     */
    async apiMealTrackerMealsIdGet(requestParameters: ApiMealTrackerMealsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meal> {
        const response = await this.apiMealTrackerMealsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMealTrackerUserhealthUserIdGetRaw(requestParameters: ApiMealTrackerUserhealthUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserHealth>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiMealTrackerUserhealthUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/MealTracker/userhealth/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserHealthFromJSON(jsonValue));
    }

    /**
     */
    async apiMealTrackerUserhealthUserIdGet(requestParameters: ApiMealTrackerUserhealthUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserHealth> {
        const response = await this.apiMealTrackerUserhealthUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
