/* tslint:disable */
/* eslint-disable */
/**
 * Foods API
 * API za upravljanje s podatki o hrani.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Food,
  FoodDto,
  ProblemDetails,
} from '../models/index';
import {
    FoodFromJSON,
    FoodToJSON,
    FoodDtoFromJSON,
    FoodDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiFoodsBelowCaloriesGetRequest {
    maxCalories?: number;
}

export interface ApiFoodsCreateManyPostRequest {
    foodDto?: Array<FoodDto>;
}

export interface ApiFoodsDeleteByNameDeleteRequest {
    name?: string;
}

export interface ApiFoodsExcludedAllergensGetRequest {
    allergens?: Array<string>;
}

export interface ApiFoodsIdDeleteRequest {
    id: string;
}

export interface ApiFoodsIdGetRequest {
    id: string;
}

export interface ApiFoodsIdPutRequest {
    id: string;
    foodDto?: FoodDto;
}

export interface ApiFoodsPostRequest {
    foodDto?: FoodDto;
}

/**
 * 
 */
export class FoodsApi extends runtime.BaseAPI {

    /**
     * Sample request:                    GET /Foods/belowCalories?maxCalories=500
     * Poišči živila, ki imajo manj kalorij, kot je določen maksimum.
     */
    async apiFoodsBelowCaloriesGetRaw(requestParameters: ApiFoodsBelowCaloriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Food>>> {
        const queryParameters: any = {};

        if (requestParameters['maxCalories'] != null) {
            queryParameters['maxCalories'] = requestParameters['maxCalories'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/belowCalories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FoodFromJSON));
    }

    /**
     * Sample request:                    GET /Foods/belowCalories?maxCalories=500
     * Poišči živila, ki imajo manj kalorij, kot je določen maksimum.
     */
    async apiFoodsBelowCaloriesGet(requestParameters: ApiFoodsBelowCaloriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Food>> {
        const response = await this.apiFoodsBelowCaloriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    POST /Foods/createMany      [          {             \"Name\": \"Peanut Butter\",             \"Calories\": 588,             \"Protein\": 25,             \"Carbohydrates\": 20,             \"Fat\": 50,             \"ServingSize\": 100,             \"Unit\": \"g\",             \"Allergens\": [ \"Peanuts\", \"Soy\" ]          },          {             \"Name\": \"Apple\",             \"Calories\": 95,             \"Protein\": 0.5,             \"Carbohydrates\": 25,             \"Fat\": 0.3,             \"ServingSize\": 100,             \"Unit\": \"g\",             \"Allergens\": [ ]          },      ]
     * Ustvari več živil naenkrat.
     */
    async apiFoodsCreateManyPostRaw(requestParameters: ApiFoodsCreateManyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/createMany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['foodDto']!.map(FoodDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    POST /Foods/createMany      [          {             \"Name\": \"Peanut Butter\",             \"Calories\": 588,             \"Protein\": 25,             \"Carbohydrates\": 20,             \"Fat\": 50,             \"ServingSize\": 100,             \"Unit\": \"g\",             \"Allergens\": [ \"Peanuts\", \"Soy\" ]          },          {             \"Name\": \"Apple\",             \"Calories\": 95,             \"Protein\": 0.5,             \"Carbohydrates\": 25,             \"Fat\": 0.3,             \"ServingSize\": 100,             \"Unit\": \"g\",             \"Allergens\": [ ]          },      ]
     * Ustvari več živil naenkrat.
     */
    async apiFoodsCreateManyPost(requestParameters: ApiFoodsCreateManyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFoodsCreateManyPostRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    DELETE /Foods/deleteByName?name=Peanut butter
     * Izbriši živila glede na ime.
     */
    async apiFoodsDeleteByNameDeleteRaw(requestParameters: ApiFoodsDeleteByNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/deleteByName`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    DELETE /Foods/deleteByName?name=Peanut butter
     * Izbriši živila glede na ime.
     */
    async apiFoodsDeleteByNameDelete(requestParameters: ApiFoodsDeleteByNameDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFoodsDeleteByNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    GET /Foods/excludedAllergens?allergens=Soy
     * Poišči živila, ki ne vsebujejo določenih alergenov.
     */
    async apiFoodsExcludedAllergensGetRaw(requestParameters: ApiFoodsExcludedAllergensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Food>>> {
        const queryParameters: any = {};

        if (requestParameters['allergens'] != null) {
            queryParameters['allergens'] = requestParameters['allergens'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/excludedAllergens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FoodFromJSON));
    }

    /**
     * Sample request:                    GET /Foods/excludedAllergens?allergens=Soy
     * Poišči živila, ki ne vsebujejo določenih alergenov.
     */
    async apiFoodsExcludedAllergensGet(requestParameters: ApiFoodsExcludedAllergensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Food>> {
        const response = await this.apiFoodsExcludedAllergensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pridobi seznam vseh živil.
     */
    async apiFoodsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Food>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FoodFromJSON));
    }

    /**
     * Pridobi seznam vseh živil.
     */
    async apiFoodsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Food>> {
        const response = await this.apiFoodsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    DELETE /Foods/675ed9ecdd35e38cb0c61281
     * Izbriši živilo po ID-ju.
     */
    async apiFoodsIdDeleteRaw(requestParameters: ApiFoodsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiFoodsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    DELETE /Foods/675ed9ecdd35e38cb0c61281
     * Izbriši živilo po ID-ju.
     */
    async apiFoodsIdDelete(requestParameters: ApiFoodsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFoodsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    GET /Foods/675ed9ecdd35e38cb0c61281
     * Pridobi živilo po ID-ju.
     */
    async apiFoodsIdGetRaw(requestParameters: ApiFoodsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Food>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiFoodsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /Foods/675ed9ecdd35e38cb0c61281
     * Pridobi živilo po ID-ju.
     */
    async apiFoodsIdGet(requestParameters: ApiFoodsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Food> {
        const response = await this.apiFoodsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    PUT /Foods/675ed9ecdd35e38cb0c61281      {         \"Name\": \"Peanut Butter\",         \"Calories\": 588,         \"Protein\": 25,         \"Carbohydrates\": 20,         \"Fat\": 50,         \"ServingSize\": 100,         \"Unit\": \"g\",         \"Allergens\": [ \"Peanuts\", \"Soy\" ]      }
     * Posodobi obstoječe živilo.
     */
    async apiFoodsIdPutRaw(requestParameters: ApiFoodsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiFoodsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FoodDtoToJSON(requestParameters['foodDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    PUT /Foods/675ed9ecdd35e38cb0c61281      {         \"Name\": \"Peanut Butter\",         \"Calories\": 588,         \"Protein\": 25,         \"Carbohydrates\": 20,         \"Fat\": 50,         \"ServingSize\": 100,         \"Unit\": \"g\",         \"Allergens\": [ \"Peanuts\", \"Soy\" ]      }
     * Posodobi obstoječe živilo.
     */
    async apiFoodsIdPut(requestParameters: ApiFoodsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFoodsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    POST /Foods      {         \"Name\": \"Peanut Butter\",         \"Calories\": 588,         \"Protein\": 25,         \"Carbohydrates\": 20,         \"Fat\": 50,         \"ServingSize\": 100,         \"Unit\": \"g\",         \"Allergens\": [ \"Peanuts\", \"Soy\" ]      }
     * Dodaj novo živilo.
     */
    async apiFoodsPostRaw(requestParameters: ApiFoodsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Foods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FoodDtoToJSON(requestParameters['foodDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    POST /Foods      {         \"Name\": \"Peanut Butter\",         \"Calories\": 588,         \"Protein\": 25,         \"Carbohydrates\": 20,         \"Fat\": 50,         \"ServingSize\": 100,         \"Unit\": \"g\",         \"Allergens\": [ \"Peanuts\", \"Soy\" ]      }
     * Dodaj novo živilo.
     */
    async apiFoodsPost(requestParameters: ApiFoodsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFoodsPostRaw(requestParameters, initOverrides);
    }

}
