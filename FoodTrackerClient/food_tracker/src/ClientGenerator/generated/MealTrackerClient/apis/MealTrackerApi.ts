/* tslint:disable */
/* eslint-disable */
/**
 * Meal Tracker API
 * API documentation for the Meal Tracker Service
 *
 * The version of the OpenAPI document: v1
 * Contact: your.email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { MealPlan } from "../models/index";
import { MealPlanFromJSON, MealPlanToJSON } from "../models/index";

export interface ApiMealTrackerFoodIdGetRequest {
  id: string;
}

export interface ApiMealTrackerMealIdGetRequest {
  id: string;
}

export interface ApiMealTrackerMealplanIdDeleteRequest {
  id: string;
}

export interface ApiMealTrackerMealplanIdPutRequest {
  id: string;
  mealPlan?: MealPlan;
}

export interface ApiMealTrackerMealplanPostRequest {
  mealPlan?: MealPlan;
}

/**
 *
 */
export class MealTrackerApi extends runtime.BaseAPI {
  /**
   * Retrieves a food by its ID.
   */
  async apiMealTrackerFoodIdGetRaw(
    requestParameters: ApiMealTrackerFoodIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiMealTrackerFoodIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/MealTracker/food/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves a food by its ID.
   */
  async apiMealTrackerFoodIdGet(
    requestParameters: ApiMealTrackerFoodIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerFoodIdGetRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves all foods from the Food Service.
   */
  async apiMealTrackerFoodsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/MealTracker/foods`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves all foods from the Food Service.
   */
  async apiMealTrackerFoodsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerFoodsGetRaw(initOverrides);
  }

  /**
   * Retrieves a meal by its ID.
   */
  async apiMealTrackerMealIdGetRaw(
    requestParameters: ApiMealTrackerMealIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiMealTrackerMealIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/MealTracker/meal/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves a meal by its ID.
   */
  async apiMealTrackerMealIdGet(
    requestParameters: ApiMealTrackerMealIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerMealIdGetRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a meal plan by ID.
   */
  async apiMealTrackerMealplanIdDeleteRaw(
    requestParameters: ApiMealTrackerMealplanIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiMealTrackerMealplanIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/MealTracker/mealplan/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a meal plan by ID.
   */
  async apiMealTrackerMealplanIdDelete(
    requestParameters: ApiMealTrackerMealplanIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerMealplanIdDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Updates an existing meal plan.
   */
  async apiMealTrackerMealplanIdPutRaw(
    requestParameters: ApiMealTrackerMealplanIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiMealTrackerMealplanIdPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/MealTracker/mealplan/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: MealPlanToJSON(requestParameters["mealPlan"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates an existing meal plan.
   */
  async apiMealTrackerMealplanIdPut(
    requestParameters: ApiMealTrackerMealplanIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerMealplanIdPutRaw(requestParameters, initOverrides);
  }

  /**
   * Creates a new meal plan.
   */
  async apiMealTrackerMealplanPostRaw(
    requestParameters: ApiMealTrackerMealplanPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/MealTracker/mealplan`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MealPlanToJSON(requestParameters["mealPlan"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a new meal plan.
   */
  async apiMealTrackerMealplanPost(
    requestParameters: ApiMealTrackerMealplanPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiMealTrackerMealplanPostRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves all meal plans, including detailed food information for each meal.
   */
  async apiMealTrackerMealplansGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MealPlan[]>> {
    const queryParameters: any = {};
    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/MealTracker/mealplans`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(
      response,
      (jsonValue) => jsonValue as MealPlan[]
    );
  }

  /**
   * Retrieves all meal plans, including detailed food information for each meal.
   */
  async apiMealTrackerMealplansGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MealPlan[]> {
    const response = await this.apiMealTrackerMealplansGetRaw(initOverrides);
    return response.value();
  }
}
