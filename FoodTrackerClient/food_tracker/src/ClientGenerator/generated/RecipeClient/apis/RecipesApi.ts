/* tslint:disable */
/* eslint-disable */
/**
 * RecipeService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Recipe,
  RecipeRequest,
} from '../models/index';
import {
    RecipeFromJSON,
    RecipeToJSON,
    RecipeRequestFromJSON,
    RecipeRequestToJSON,
} from '../models/index';

export interface ApiRecipesIdDeleteRequest {
    id: string;
}

export interface ApiRecipesIdGetRequest {
    id: string;
}

export interface ApiRecipesIdPutRequest {
    id: string;
    recipe?: Recipe;
}

export interface ApiRecipesPostRequest {
    recipeRequest?: RecipeRequest;
}

/**
 * 
 */
export class RecipesApi extends runtime.BaseAPI {

    /**
     */
    async apiRecipesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Recipe>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Recipes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeFromJSON));
    }

    /**
     */
    async apiRecipesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Recipe>> {
        const response = await this.apiRecipesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipesIdDeleteRaw(requestParameters: ApiRecipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRecipesIdDelete(requestParameters: ApiRecipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRecipesIdGetRaw(requestParameters: ApiRecipesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recipe>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeFromJSON(jsonValue));
    }

    /**
     */
    async apiRecipesIdGet(requestParameters: ApiRecipesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recipe> {
        const response = await this.apiRecipesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRecipesIdPutRaw(requestParameters: ApiRecipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeToJSON(requestParameters['recipe']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRecipesIdPut(requestParameters: ApiRecipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiRecipesPostRaw(requestParameters: ApiRecipesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Recipes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeRequestToJSON(requestParameters['recipeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiRecipesPost(requestParameters: ApiRecipesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesPostRaw(requestParameters, initOverrides);
    }

}
