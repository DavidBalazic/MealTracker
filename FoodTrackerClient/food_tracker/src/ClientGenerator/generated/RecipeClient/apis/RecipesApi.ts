/* tslint:disable */
/* eslint-disable */
/**
 * Recipes API
 * API za upravljanje s podatki o receptih.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  Recipe,
  RecipeRequestDto,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RecipeFromJSON,
    RecipeToJSON,
    RecipeRequestDtoFromJSON,
    RecipeRequestDtoToJSON,
} from '../models/index';

export interface ApiRecipesBelowCaloriesGetRequest {
    maxCalories?: number;
}

export interface ApiRecipesByTagGetRequest {
    tag?: string;
}

export interface ApiRecipesCreateManyPostRequest {
    recipeRequestDto?: Array<RecipeRequestDto>;
}

export interface ApiRecipesDeleteByNameDeleteRequest {
    name?: string;
}

export interface ApiRecipesIdDeleteRequest {
    id: string;
}

export interface ApiRecipesIdGetRequest {
    id: string;
}

export interface ApiRecipesIdPutRequest {
    id: string;
    recipeRequestDto?: RecipeRequestDto;
}

export interface ApiRecipesIdUpdateTagsPutRequest {
    id: string;
    requestBody?: Array<string>;
}

export interface ApiRecipesPerServingIdGetRequest {
    id: string;
}

export interface ApiRecipesPostRequest {
    recipeRequestDto?: RecipeRequestDto;
}

/**
 * 
 */
export class RecipesApi extends runtime.BaseAPI {

    /**
     * Sample request:                    GET /Recipes/belowCalories?maxCalories=500
     * Pridobi seznam receptov z manj kot določenim številom kalorij.
     */
    async apiRecipesBelowCaloriesGetRaw(requestParameters: ApiRecipesBelowCaloriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Recipe>>> {
        const queryParameters: any = {};

        if (requestParameters['maxCalories'] != null) {
            queryParameters['maxCalories'] = requestParameters['maxCalories'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/belowCalories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeFromJSON));
    }

    /**
     * Sample request:                    GET /Recipes/belowCalories?maxCalories=500
     * Pridobi seznam receptov z manj kot določenim številom kalorij.
     */
    async apiRecipesBelowCaloriesGet(requestParameters: ApiRecipesBelowCaloriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Recipe>> {
        const response = await this.apiRecipesBelowCaloriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /Recipes/byTag?tag=vegan
     * Pridobi seznam receptov glede na oznako.
     */
    async apiRecipesByTagGetRaw(requestParameters: ApiRecipesByTagGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Recipe>>> {
        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/byTag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeFromJSON));
    }

    /**
     * Sample request:                    GET /Recipes/byTag?tag=vegan
     * Pridobi seznam receptov glede na oznako.
     */
    async apiRecipesByTagGet(requestParameters: ApiRecipesByTagGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Recipe>> {
        const response = await this.apiRecipesByTagGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    POST /Recipes/createMany      [          {              \"name\": \"Smoothie\",              \"ingredients\": [                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 200                  },                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 100                  },                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 200                  }              ],              \"servings\": 2,              \"instructions\": \"Mix apple, strawberry and milk\",              \"tags\": [ \"Smotohie\" ]          },          {              \"name\": \"Chicken and Broccoli\",              \"ingredients\": [                  {                      \"foodId\": \"64b8f740d8234c12d482\",                      \"quantity\": 150                  },                  {                      \"foodId\": \"64b8f740d8234c12d482\",                      \"quantity\": 200                  }              ],              \"servings\": 2,              \"instructions\": \"Steam broccoli and fry chickhen\",              \"tags\": [ \"Healthy\" ]          }      ]
     * Ustvari več receptov hkrati.
     */
    async apiRecipesCreateManyPostRaw(requestParameters: ApiRecipesCreateManyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/createMany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['recipeRequestDto']!.map(RecipeRequestDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    POST /Recipes/createMany      [          {              \"name\": \"Smoothie\",              \"ingredients\": [                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 200                  },                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 100                  },                  {                      \"foodId\": \"64b8f740d8234c12d481\",                      \"quantity\": 200                  }              ],              \"servings\": 2,              \"instructions\": \"Mix apple, strawberry and milk\",              \"tags\": [ \"Smotohie\" ]          },          {              \"name\": \"Chicken and Broccoli\",              \"ingredients\": [                  {                      \"foodId\": \"64b8f740d8234c12d482\",                      \"quantity\": 150                  },                  {                      \"foodId\": \"64b8f740d8234c12d482\",                      \"quantity\": 200                  }              ],              \"servings\": 2,              \"instructions\": \"Steam broccoli and fry chickhen\",              \"tags\": [ \"Healthy\" ]          }      ]
     * Ustvari več receptov hkrati.
     */
    async apiRecipesCreateManyPost(requestParameters: ApiRecipesCreateManyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesCreateManyPostRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    DELETE /Recipes/deleteByName?name=Chocolate%20Cake
     * Izbriše recepte z določenim imenom.
     */
    async apiRecipesDeleteByNameDeleteRaw(requestParameters: ApiRecipesDeleteByNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/deleteByName`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    DELETE /Recipes/deleteByName?name=Chocolate%20Cake
     * Izbriše recepte z določenim imenom.
     */
    async apiRecipesDeleteByNameDelete(requestParameters: ApiRecipesDeleteByNameDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesDeleteByNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Pridobi seznam vseh receptov.
     */
    async apiRecipesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Recipe>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeFromJSON));
    }

    /**
     * Pridobi seznam vseh receptov.
     */
    async apiRecipesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Recipe>> {
        const response = await this.apiRecipesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    DELETE /Recipes/675ed9ecdd35e38cb0c61281
     * Izbriše recept po ID-ju.
     */
    async apiRecipesIdDeleteRaw(requestParameters: ApiRecipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    DELETE /Recipes/675ed9ecdd35e38cb0c61281
     * Izbriše recept po ID-ju.
     */
    async apiRecipesIdDelete(requestParameters: ApiRecipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    GET /Recipes/675ed9ecdd35e38cb0c61281
     * Pridobi recept po ID-ju.
     */
    async apiRecipesIdGetRaw(requestParameters: ApiRecipesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recipe>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /Recipes/675ed9ecdd35e38cb0c61281
     * Pridobi recept po ID-ju.
     */
    async apiRecipesIdGet(requestParameters: ApiRecipesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recipe> {
        const response = await this.apiRecipesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    PUT /Recipes/675ed9ecdd35e38cb0c61281      {          \"name\": \"Smoothie\",          \"ingredients\": [              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 150              }          ],          \"servings\": 2,          \"instructions\": \"Zmešajte vse sestavine v mešalniku.\",          \"tags\": [ \"pijača\", \"zajtrk\" ]      }
     * Posodobi obstoječi recept po ID-ju.
     */
    async apiRecipesIdPutRaw(requestParameters: ApiRecipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeRequestDtoToJSON(requestParameters['recipeRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    PUT /Recipes/675ed9ecdd35e38cb0c61281      {          \"name\": \"Smoothie\",          \"ingredients\": [              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 150              }          ],          \"servings\": 2,          \"instructions\": \"Zmešajte vse sestavine v mešalniku.\",          \"tags\": [ \"pijača\", \"zajtrk\" ]      }
     * Posodobi obstoječi recept po ID-ju.
     */
    async apiRecipesIdPut(requestParameters: ApiRecipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Sample request:                    PUT /Recipes/675ed9ecdd35e38cb0c61281/updateTags            [ \"Vegan\", \"Healthy\" ]
     * Posodobi oznake obstoječega recepta po ID-ju.
     */
    async apiRecipesIdUpdateTagsPutRaw(requestParameters: ApiRecipesIdUpdateTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesIdUpdateTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/{id}/updateTags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    PUT /Recipes/675ed9ecdd35e38cb0c61281/updateTags            [ \"Vegan\", \"Healthy\" ]
     * Posodobi oznake obstoječega recepta po ID-ju.
     */
    async apiRecipesIdUpdateTagsPut(requestParameters: ApiRecipesIdUpdateTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesIdUpdateTagsPutRaw(requestParameters, initOverrides);
    }

    /**
     * Primer zahteve:                    GET /per-serving/{id}
     * Pridobi obdelane prehranske informacije za recept.
     */
    async apiRecipesPerServingIdGetRaw(requestParameters: ApiRecipesPerServingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiRecipesPerServingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes/per-serving/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Primer zahteve:                    GET /per-serving/{id}
     * Pridobi obdelane prehranske informacije za recept.
     */
    async apiRecipesPerServingIdGet(
        requestParameters: ApiRecipesPerServingIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
      ): Promise<{
        Name: string;
        TotalNutrition: {
          Calories: number;
          Protein: number;
          Carbohydrates: number;
          Fat: number;
        };
        NutritionPerServing: {
          Calories: number;
          Protein: number;
          Carbohydrates: number;
          Fat: number;
        };
        Tags: string[];
      }> {
        if (requestParameters.id == null) {
          throw new runtime.RequiredError(
            "id",
            'Required parameter "id" was null or undefined when calling apiRecipesPerServingIdGet.'
          );
        }
      
        const headerParameters: runtime.HTTPHeaders = {
          "Content-Type": "application/json", // Include the content type
        };
      
        const response = await this.request(
          {
            path: `/api/Recipes/per-serving/${encodeURIComponent(
              String(requestParameters.id)
            )}`,
            method: "GET",
            headers: headerParameters, // Add headers here
          },
          initOverrides
        );
      
        return await response.json(); // Parse and return the JSON response
      }
      
    /**
     * Sample request:                    POST /Recipes      {          \"name\": \"Smoothie\",          \"ingredients\": [              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 200              },              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 100              },              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 200              }          ],          \"servings\": 2,          \"instructions\": \"Mix apple, strawberry and milk\",          \"tags\": [ \"Smotohie\" ]      }
     * Ustvari nov recept.
     */
    async apiRecipesPostRaw(requestParameters: ApiRecipesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Recipes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeRequestDtoToJSON(requestParameters['recipeRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sample request:                    POST /Recipes      {          \"name\": \"Smoothie\",          \"ingredients\": [              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 200              },              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 100              },              {                  \"foodId\": \"64b8f740d8234c12d481\",                  \"quantity\": 200              }          ],          \"servings\": 2,          \"instructions\": \"Mix apple, strawberry and milk\",          \"tags\": [ \"Smotohie\" ]      }
     * Ustvari nov recept.
     */
    async apiRecipesPost(requestParameters: ApiRecipesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiRecipesPostRaw(requestParameters, initOverrides);
    }

}
