{
  "openapi": "3.0.1",
  "info": {
    "title": "User Service API",
    "description": "An API for managing users, authentication, and sessions",
    "version": "v1"
  },
  "paths": {
    "/api/Users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Registers a new user.",
        "description": "Sample request:\r\n\r\n    POST /api/Users/register\r\n    {\r\n        \"email\": \"user@example.com\",\r\n        \"password\": \"StrongPassword123\"\r\n    }",
        "requestBody": {
          "description": "The registration details, including email and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered a new user, returning the UserId."
          },
          "400": {
            "description": "Invalid request, including missing or malformed data.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Authenticates a user and returns a JWT token.",
        "description": "Sample request:\r\n\r\n    POST /api/Users/login\r\n    {\r\n        \"email\": \"user@example.com\",\r\n        \"password\": \"StrongPassword123\"\r\n    }",
        "requestBody": {
          "description": "The login details, including email and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated the user and generated a token."
          },
          "400": {
            "description": "Invalid request, including missing email or password.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to invalid credentials.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/update": {
      "put": {
        "tags": ["Users"],
        "summary": "Updates the authenticated user's password or email.",
        "description": "Sample request:\r\n            \r\n    PUT /api/Users/update\r\n    {\r\n        \"userId\": \"63f1e4d5e70b2f00123abcde\",\r\n        \"newEmail\": \"newemail@example.com\",\r\n        \"newPassword\": \"NewPassword123!\"\r\n    }\r\n            \r\nIf no `newEmail` or `newPassword` is provided, the respective fields will remain unchanged.",
        "requestBody": {
          "description": "The user update details, including a new password or email.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user's password or email."
          },
          "400": {
            "description": "Invalid input, such as missing required fields or invalid values.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access, such as when the user is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/validate-token": {
      "post": {
        "tags": ["Users"],
        "summary": "Validates the provided JWT token.",
        "description": "Sample request:\r\n\r\n    POST /api/Users/validate-token\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
        "requestBody": {
          "description": "The JWT token to validate.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token is successfully validated."
          },
          "401": {
            "description": "Unauthorized access when the request lacks valid credentials.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/user-info": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieves the authenticated user's information.",
        "description": "This endpoint fetches information about the currently authenticated user based on their JWT token.\r\n\r\nSample response:\r\n\r\n    {\r\n        \"Message\": \"User Info\",\r\n        \"UserId\": \"63f1e4d5e70b2f00123abcde\",\r\n        \"Email\": \"user@example.com\",\r\n        \"Role\": \"admin\"\r\n    }",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's information."
          },
          "401": {
            "description": "Unauthorized access when the request lacks valid credentials.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/delete-account": {
      "delete": {
        "tags": ["Users"],
        "summary": "Deletes the currently authenticated user's account.",
        "description": "This endpoint allows the authenticated user to delete their account permanently.\r\n\r\nSample request:\r\n\r\n    DELETE /api/Users/delete-account",
        "responses": {
          "200": {
            "description": "Account deleted successfully."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated or the token is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request if an error occurs during the deletion process.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/admin/delete-user/{id}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Deletes a user by their ID. Accessible only by admins.",
        "description": "Sample request:\r\n\r\n    DELETE /api/Users/admin/delete-user/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "400": {
            "description": "Bad request if the user ID is invalid or an error occurs.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the admin is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden if the user does not have admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/admin/update-role/{id}": {
      "put": {
        "tags": ["Users"],
        "summary": "Updates the role of a user by their ID. Accessible only by admins.",
        "description": "Sample request:\r\n\r\n    PUT /api/Users/admin/update-role/{id}\r\n\r\nRequest body:\r\n\r\n    \"admin\"",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose role is being updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new role to assign to the user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully."
          },
          "400": {
            "description": "Bad request if the user ID or role is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the admin is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden if the user does not have admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieves all users or filters users by role. Accessible only by admins.",
        "description": "Sample request:\r\n\r\n    GET /api/Users?role=admin",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Optional role to filter users. If not provided, retrieves all users.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of users."
          },
          "400": {
            "description": "Bad request if an error occurs during data retrieval.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the admin is not authenticated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden if the user does not have admin privileges.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "RegisterDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter your valid JWT token below.",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
